Column(
        children: [
          ElevatedButton(
              child: const Text('Show'),
              onPressed: () {
                _helper!.getDictionary().then((value) {
                  setState(() {
                    _listDict!.clear();
                    _listDict!.addAll(value);
                  });
                });
              }),
          ListView.builder(
              shrinkWrap: true,
              itemCount: _listDict!.length,
              itemBuilder: (context, index) {
                return Column(
                  children: [
                    ListTile(
                      title: Text(_listDict![index].word),
                      subtitle: Text(_listDict![index].pronounce),
                    ),
                    const Divider(
                      thickness: 0.5,
                      color: Colors.blue,
                    ),
                  ],
                );
              }),
        ],
      )),

      GestureDetector(
                  onTap: () {
                    if (!currentFocus.hasPrimaryFocus &&
                        currentFocus.focusedChild != null) {
                      FocusManager.instance.primaryFocus?.unfocus();
                    }
                  },
                  child: TextField(
                    controller: _searchingTextController,
                    onChanged: (value) {
                      keywords = value;
                      setState(() {});
                    },
                    decoration: InputDecoration(
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(50.0)),
                        filled: true,
                        fillColor: Colors.white,
                        contentPadding: const EdgeInsets.only(top: 12),
                        hintText: "Enter ",
                        prefixIcon: const Icon(Icons.search)),
                  ),
                )

                // FutureBuilder(
            //   future: _helper!.getSearchingWord(keywords),
            //   builder: (context, snapshot) {
            //     if (snapshot.hasError) {
            //       print('error');
            //     }
            //     var data = snapshot.data;
            //     return snapshot.hasData
            //         ? DictionaryList(dicts: data as List<Dictionary>)
            //         : Container();
            //   },
            // )